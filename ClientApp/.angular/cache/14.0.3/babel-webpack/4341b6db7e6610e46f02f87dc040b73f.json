{"ast":null,"code":"import _asyncToGenerator from \"C:/Development/JWTAuth/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServiceService {\n  constructor(http) {\n    this.http = http;\n    this.token = \"\";\n    this.message = \"\";\n  }\n\n  getToken() {\n    return new Promise((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"manager\").set(\"password\", \"password1\");\n      this.http.get(\"https://localhost:7054/token\", {\n        params\n      }).subscribe({\n        next: res => {\n          resolve(res.token);\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  getAdminOnly() {\n    return new Promise((resolve, reject) => {\n      this.http.get(\"https://localhost:7054/MyAPI/admin-only\").subscribe({\n        next: res => {\n          resolve(res.displayedMessage);\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  getAdminOrManager() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\").subscribe({\n          next: res => {\n            resolve(res.displayedMessage);\n          },\n          error: err => {\n            reject(err);\n          }\n        });\n      });\n    })();\n  }\n\n  getAuthenticatedUser() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.get(\"https://localhost:7054/MyAPI/authenticated-user\").subscribe({\n          next: res => {\n            resolve(res.displayedMessage);\n          },\n          error: err => {\n            reject(err);\n          }\n        });\n      });\n    })();\n  }\n\n}\n\nAuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n  return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServiceService,\n  factory: AuthServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,UAArB,QAAuC,sBAAvC;;;AAMA,OAAM,MAAOC,kBAAP,CAAyB;EAG7BC,YAAoBC,IAApB,EAAoC;IAAhB;IAFpB,aAAgB,EAAhB;IACA,eAAkB,EAAlB;EACyC;;EAEzCC,QAAQ;IACN,OAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAC7C,IAAIC,MAAM,GAAG,IAAIR,UAAJ,GAAiBS,GAAjB,CAAqB,UAArB,EAAiC,SAAjC,EAA4CA,GAA5C,CAAgD,UAAhD,EAA4D,WAA5D,CAAb;MACA,KAAKN,IAAL,CAAUO,GAAV,CAAc,8BAAd,EAA8C;QAAEF;MAAF,CAA9C,EAA0DG,SAA1D,CAAoE;QAClEC,IAAI,EAAGC,GAAD,IAAa;UACjBP,OAAO,CAACO,GAAG,CAACC,KAAL,CAAP;QACD,CAHiE;QAIlEC,KAAK,EAAGC,GAAD,IAAY;UACjBT,MAAM,CAACS,GAAD,CAAN;QACD;MANiE,CAApE;IAQD,CAVM,CAAP;EAWD;;EAEDC,YAAY;IACV,OAAO,IAAIZ,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAC7C,KAAKJ,IAAL,CAAUO,GAAV,CAAc,yCAAd,EAAyDC,SAAzD,CAAmE;QACjEC,IAAI,EAAGC,GAAD,IAAa;UACjBP,OAAO,CAACO,GAAG,CAACK,gBAAL,CAAP;QACD,CAHgE;QAIjEH,KAAK,EAAGC,GAAD,IAAa;UAClBT,MAAM,CAACS,GAAD,CAAN;QACD;MANgE,CAAnE;IAQD,CATM,CAAP;EAUD;;EAEKG,iBAAiB;IAAA;;IAAA;MACrB,OAAO,IAAId,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;QAC7C,KAAI,CAACJ,IAAL,CAAUO,GAAV,CAAc,+CAAd,EAA+DC,SAA/D,CAAyE;UACvEC,IAAI,EAAGC,GAAD,IAAa;YACjBP,OAAO,CAACO,GAAG,CAACK,gBAAL,CAAP;UACD,CAHsE;UAIvEH,KAAK,EAAGC,GAAD,IAAa;YAClBT,MAAM,CAACS,GAAD,CAAN;UACD;QANsE,CAAzE;MAQD,CATM,CAAP;IADqB;EAWtB;;EAEKI,oBAAoB;IAAA;;IAAA;MACxB,OAAO,IAAIf,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;QAC7C,MAAI,CAACJ,IAAL,CAAUO,GAAV,CAAc,iDAAd,EAAiEC,SAAjE,CAA2E;UACzEC,IAAI,EAAGC,GAAD,IAAa;YACjBP,OAAO,CAACO,GAAG,CAACK,gBAAL,CAAP;UACD,CAHwE;UAIzEH,KAAK,EAAGC,GAAD,IAAa;YAClBT,MAAM,CAACS,GAAD,CAAN;UACD;QANwE,CAA3E;MAQD,CATM,CAAP;IADwB;EAWzB;;AAxD4B;;;mBAAlBf,oBAAkBoB;AAAA;;;SAAlBpB;EAAkBqB,SAAlBrB,kBAAkB;EAAAsB,YAFjB","names":["HttpParams","AuthServiceService","constructor","http","getToken","Promise","resolve","reject","params","set","get","subscribe","next","res","token","error","err","getAdminOnly","displayedMessage","getAdminOrManager","getAuthenticatedUser","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Development\\JWTAuth\\ClientApp\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n  token: string = \"\";\n  message: string = \"\";\n  constructor(private http: HttpClient) { }\n\n  getToken(): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"manager\").set(\"password\", \"password1\");\r\n      this.http.get(\"https://localhost:7054/token\", { params }).subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.token);\r\n        },\r\n        error: (err:any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\r\n  }\n\n  getAdminOnly(): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      this.http.get(\"https://localhost:7054/MyAPI/admin-only\").subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.displayedMessage);\r\n        },\r\n        error: (err: any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\r\n  }\n\n  async getAdminOrManager() {\n    return new Promise<string>((resolve, reject) => {\r\n      this.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\").subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.displayedMessage);\r\n        },\r\n        error: (err: any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\r\n  }\n\n  async getAuthenticatedUser() {\n    return new Promise<string>((resolve, reject) => {\r\n      this.http.get(\"https://localhost:7054/MyAPI/authenticated-user\").subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.displayedMessage);\r\n        },\r\n        error: (err: any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\r\n  }\n}\n"]},"metadata":{},"sourceType":"module"}