{"ast":null,"code":"import _asyncToGenerator from \"C:/Development/JWTAuth/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServiceService {\n  constructor(http) {\n    this.http = http;\n    this.token = \"\";\n    this.message = \"\";\n  }\n\n  getToken() {\n    var params = new HttpParams().set(\"username\", \"admin\").set(\"password\", \"password\"); //try {\n    //  this.token = await lastValueFrom(this.http.get(\"https://localhost:7054/token\", {params})) as string;\n    //} catch (error) {\n    //  console.error(error);\n    //}\n\n    this.http.get(\"https://localhost:7054/token\", {\n      params\n    }).subscribe(res => {\n      console.log(res);\n      this.token = res;\n    }, err => {\n      console.error(err);\n    });\n  }\n\n  getAdminOnly() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.message = yield lastValueFrom(_this.http.get(\"https://localhost:7054/MyAPI/admin-only\"));\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getAdminOrManager() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.message = yield lastValueFrom(_this2.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\"));\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getAuthenticatedUser() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this3.message = yield lastValueFrom(_this3.http.get(\"https://localhost:7054/MyAPI/authenticated-user\"));\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n}\n\nAuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n  return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServiceService,\n  factory: AuthServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,UAArB,QAAuC,sBAAvC;AACA,SAASC,aAAT,QAA8B,MAA9B;;;AAKA,OAAM,MAAOC,kBAAP,CAAyB;EAG7BC,YAAoBC,IAApB,EAAoC;IAAhB;IAFpB,aAAgB,EAAhB;IACA,eAAkB,EAAlB;EACyC;;EAEzCC,QAAQ;IACN,IAAIC,MAAM,GAAG,IAAIN,UAAJ,GAAiBO,GAAjB,CAAqB,UAArB,EAAiC,OAAjC,EAA0CA,GAA1C,CAA8C,UAA9C,EAA0D,UAA1D,CAAb,CADM,CAEN;IACA;IACA;IACA;IACA;;IACA,KAAKH,IAAL,CAAUI,GAAV,CAAsB,8BAAtB,EAAsD;MAAEF;IAAF,CAAtD,EAAkEG,SAAlE,CACEC,GAAG,IAAG;MACJC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACA,KAAKG,KAAL,GAAaH,GAAb;IACD,CAJH,EAKEI,GAAG,IAAG;MACJH,OAAO,CAACI,KAAR,CAAcD,GAAd;IACD,CAPH;EASD;;EAEKE,YAAY;IAAA;;IAAA;MAChB,IAAI;QACF,KAAI,CAACC,OAAL,SAAqBhB,aAAa,CAAC,KAAI,CAACG,IAAL,CAAUI,GAAV,CAAc,yCAAd,CAAD,CAAlC;MACD,CAFD,CAGA,OAAOO,KAAP,EAAc;QACZJ,OAAO,CAACI,KAAR,CAAcA,KAAd;MACD;IANe;EAOjB;;EAEKG,iBAAiB;IAAA;;IAAA;MACrB,IAAI;QACF,MAAI,CAACD,OAAL,SAAqBhB,aAAa,CAAC,MAAI,CAACG,IAAL,CAAUI,GAAV,CAAc,+CAAd,CAAD,CAAlC;MACD,CAFD,CAGA,OAAOO,KAAP,EAAc;QACZJ,OAAO,CAACI,KAAR,CAAcA,KAAd;MACD;IANoB;EAOtB;;EAEKI,oBAAoB;IAAA;;IAAA;MACxB,IAAI;QACF,MAAI,CAACF,OAAL,SAAqBhB,aAAa,CAAC,MAAI,CAACG,IAAL,CAAUI,GAAV,CAAc,iDAAd,CAAD,CAAlC;MACD,CAFD,CAGA,OAAOO,KAAP,EAAc;QACZJ,OAAO,CAACI,KAAR,CAAcA,KAAd;MACD;IANuB;EAOzB;;AAhD4B;;;mBAAlBb,oBAAkBkB;AAAA;;;SAAlBlB;EAAkBmB,SAAlBnB,kBAAkB;EAAAoB,YAFjB","names":["HttpParams","lastValueFrom","AuthServiceService","constructor","http","getToken","params","set","get","subscribe","res","console","log","token","err","error","getAdminOnly","message","getAdminOrManager","getAuthenticatedUser","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Development\\JWTAuth\\ClientApp\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n  token: string = \"\";\n  message: string = \"\";\n  constructor(private http: HttpClient) { }\n\n  getToken() {\n    var params = new HttpParams().set(\"username\", \"admin\").set(\"password\", \"password\");\n    //try {\n    //  this.token = await lastValueFrom(this.http.get(\"https://localhost:7054/token\", {params})) as string;\r\n    //} catch (error) {\r\n    //  console.error(error);\r\n    //}\r\n    this.http.get<string>(\"https://localhost:7054/token\", { params }).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this.token = res;\r\n      },\r\n      err => {\r\n        console.error(err);\r\n      }\r\n    )\r\n  }\n\n  async getAdminOnly() {\n    try {\r\n      this.message = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/admin-only\")) as string;\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n\n  async getAdminOrManager() {\n    try {\r\n      this.message = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\")) as string;\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n\n  async getAuthenticatedUser() {\n    try {\r\n      this.message = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/authenticated-user\")) as string;\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module"}