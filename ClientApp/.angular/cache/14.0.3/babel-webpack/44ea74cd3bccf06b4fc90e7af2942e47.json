{"ast":null,"code":"import _asyncToGenerator from \"C:/Development/JWTAuth/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServiceService {\n  constructor(http) {\n    this.http = http;\n    this.token = \"\";\n    this.message = \"\";\n  }\n\n  getToken() {\n    return new Promise((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"minimumAgeUser\").set(\"password\", \"password3\");\n      this.http.get(\"https://localhost:7054/token\", {\n        params\n      }).subscribe({\n        next: res => {\n          resolve(res.token);\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  getAdminOnly() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield firstValueFrom(_this.http.get(\"https://localhost:7054/MyAPI/admin-only\"));\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n\n  getAdminOrManager() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield firstValueFrom(_this2.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\"));\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n\n  getAuthenticatedUser() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield firstValueFrom(_this3.http.get(\"https://localhost:7054/MyAPI/authenticated-user\"));\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n\n  getMinimumAgeUser() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield firstValueFrom(_this4.http.get(\"https://localhost:7054/MyAPI/minimum-age-user\"));\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n\n}\n\nAuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n  return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServiceService,\n  factory: AuthServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,UAArB,QAAuC,sBAAvC;AACA,SAASC,cAAT,QAA8C,MAA9C;;;AAMA,OAAM,MAAOC,kBAAP,CAAyB;EAG7BC,YAAoBC,IAApB,EAAoC;IAAhB;IAFpB,aAAgB,EAAhB;IACA,eAAkB,EAAlB;EACyC;;EAEzCC,QAAQ;IACN,OAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAC7C,IAAIC,MAAM,GAAG,IAAIT,UAAJ,GAAiBU,GAAjB,CAAqB,UAArB,EAAiC,gBAAjC,EAAmDA,GAAnD,CAAuD,UAAvD,EAAmE,WAAnE,CAAb;MACA,KAAKN,IAAL,CAAUO,GAAV,CAAc,8BAAd,EAA8C;QAAEF;MAAF,CAA9C,EAA0DG,SAA1D,CAAoE;QAClEC,IAAI,EAAGC,GAAD,IAAa;UACjBP,OAAO,CAACO,GAAG,CAACC,KAAL,CAAP;QACD,CAHiE;QAIlEC,KAAK,EAAGC,GAAD,IAAY;UACjBT,MAAM,CAACS,GAAD,CAAN;QACD;MANiE,CAApE;IAQD,CAVM,CAAP;EAWD;;EAEKC,YAAY;IAAA;;IAAA;MAChB,IAAI;QACF,MAAMC,QAAQ,SAASlB,cAAc,CAAC,KAAI,CAACG,IAAL,CAAUO,GAAV,CAA4B,yCAA5B,CAAD,CAArC;QACA,OAAOQ,QAAP;MACD,CAHD,CAIA,OAAOH,KAAP,EAAc;QACZ,MAAMA,KAAN;MACD;IAPe;EAQjB;;EAEKI,iBAAiB;IAAA;;IAAA;MACrB,IAAI;QACF,MAAMD,QAAQ,SAASlB,cAAc,CAAC,MAAI,CAACG,IAAL,CAAUO,GAAV,CAA4B,+CAA5B,CAAD,CAArC;QACA,OAAOQ,QAAP;MACD,CAHD,CAIA,OAAOH,KAAP,EAAc;QACZ,MAAMA,KAAN;MACD;IAPoB;EAQtB;;EAEKK,oBAAoB;IAAA;;IAAA;MACxB,IAAI;QACF,MAAMF,QAAQ,SAASlB,cAAc,CAAC,MAAI,CAACG,IAAL,CAAUO,GAAV,CAA4B,iDAA5B,CAAD,CAArC;QACA,OAAOQ,QAAP;MACD,CAHD,CAIA,OAAOH,KAAP,EAAc;QACZ,MAAMA,KAAN;MACD;IAPuB;EAQzB;;EAEKM,iBAAiB;IAAA;;IAAA;MACrB,IAAI;QACF,MAAMH,QAAQ,SAASlB,cAAc,CAAC,MAAI,CAACG,IAAL,CAAUO,GAAV,CAA4B,+CAA5B,CAAD,CAArC;QACA,OAAOQ,QAAP;MACD,CAHD,CAIA,OAAOH,KAAP,EAAc;QACZ,MAAMA,KAAN;MACD;IAPoB;EAQtB;;AAzD4B;;;mBAAlBd,oBAAkBqB;AAAA;;;SAAlBrB;EAAkBsB,SAAlBtB,kBAAkB;EAAAuB,YAFjB","names":["HttpParams","firstValueFrom","AuthServiceService","constructor","http","getToken","Promise","resolve","reject","params","set","get","subscribe","next","res","token","error","err","getAdminOnly","response","getAdminOrManager","getAuthenticatedUser","getMinimumAgeUser","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Development\\JWTAuth\\ClientApp\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { firstValueFrom, lastValueFrom } from 'rxjs';\r\nimport { JsonResponse } from './Models';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n  token: string = \"\";\n  message: string = \"\";\n  constructor(private http: HttpClient) { }\n\n  getToken(): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"minimumAgeUser\").set(\"password\", \"password3\");\r\n      this.http.get(\"https://localhost:7054/token\", { params }).subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.token);\r\n        },\r\n        error: (err:any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\r\n  }\n\n  async getAdminOnly(): Promise<JsonResponse> {\r\n    try {\r\n      const response = await firstValueFrom(this.http.get<JsonResponse>(\"https://localhost:7054/MyAPI/admin-only\"));\r\n      return response;\r\n    }\r\n    catch (error) {\r\n      throw error;\r\n    }\r\n  }\n\n  async getAdminOrManager(): Promise<JsonResponse> {\n    try {\r\n      const response = await firstValueFrom(this.http.get<JsonResponse>(\"https://localhost:7054/MyAPI/manager-or-admin\"));\r\n      return response;\r\n    }\r\n    catch (error) {\r\n      throw error;\r\n    }\r\n  }\n\n  async getAuthenticatedUser(): Promise<JsonResponse> {\n    try {\r\n      const response = await firstValueFrom(this.http.get<JsonResponse>(\"https://localhost:7054/MyAPI/authenticated-user\"));\r\n      return response;\r\n    }\r\n    catch (error) {\r\n      throw error;\r\n    }\r\n  }\n\n  async getMinimumAgeUser(): Promise<JsonResponse> {\n    try {\r\n      const response = await firstValueFrom(this.http.get<JsonResponse>(\"https://localhost:7054/MyAPI/minimum-age-user\"));\r\n      return response;\r\n    }\r\n    catch (error) {\r\n      throw error;\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module"}