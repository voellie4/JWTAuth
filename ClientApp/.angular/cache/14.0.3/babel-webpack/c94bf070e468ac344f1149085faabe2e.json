{"ast":null,"code":"import _asyncToGenerator from \"C:/Development/JWTAuth/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServiceService {\n  constructor(http) {\n    this.http = http;\n    this.token = \"\";\n    this.message = \"\";\n  }\n\n  getToken() {\n    const promise = new Promise((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"admin\").set(\"password\", \"password\");\n      this.http.get(\"https://localhost:7054/token\", {\n        params\n      }).subscribe({\n        next: res => {\n          resolve(res.token);\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n    return promise;\n  }\n\n  getAdminOnly() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        var messageObj = yield lastValueFrom(_this.http.get(\"https://localhost:7054/MyAPI/admin-only\"));\n        console.log(messageObj);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getAdminOrManager() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.message = yield lastValueFrom(_this2.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\"));\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getAuthenticatedUser() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this3.message = yield lastValueFrom(_this3.http.get(\"https://localhost:7054/MyAPI/authenticated-user\"));\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n}\n\nAuthServiceService.ɵfac = function AuthServiceService_Factory(t) {\n  return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServiceService,\n  factory: AuthServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,UAArB,QAAuC,sBAAvC;AACA,SAASC,aAAT,QAA8B,MAA9B;;;AAKA,OAAM,MAAOC,kBAAP,CAAyB;EAG7BC,YAAoBC,IAApB,EAAoC;IAAhB;IAFpB,aAAgB,EAAhB;IACA,eAAkB,EAAlB;EACyC;;EAEzCC,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACtD,IAAIC,MAAM,GAAG,IAAIV,UAAJ,GAAiBW,GAAjB,CAAqB,UAArB,EAAiC,OAAjC,EAA0CA,GAA1C,CAA8C,UAA9C,EAA0D,UAA1D,CAAb;MACA,KAAKP,IAAL,CAAUQ,GAAV,CAAc,8BAAd,EAA8C;QAAEF;MAAF,CAA9C,EAA0DG,SAA1D,CAAoE;QAClEC,IAAI,EAAGC,GAAD,IAAa;UACjBP,OAAO,CAACO,GAAG,CAACC,KAAL,CAAP;QACD,CAHiE;QAIlEC,KAAK,EAAGC,GAAD,IAAY;UACjBT,MAAM,CAACS,GAAD,CAAN;QACD;MANiE,CAApE;IAQD,CAVe,CAAhB;IAWA,OAAOZ,OAAP;EACD;;EAEKa,YAAY;IAAA;;IAAA;MAChB,IAAI;QACF,IAAIC,UAAU,SAASnB,aAAa,CAAC,KAAI,CAACG,IAAL,CAAUQ,GAAV,CAAc,yCAAd,CAAD,CAApC;QACAS,OAAO,CAACC,GAAR,CAAYF,UAAZ;MACD,CAHD,CAIA,OAAOH,KAAP,EAAc;QACZI,OAAO,CAACJ,KAAR,CAAcA,KAAd;MACD;IAPe;EAQjB;;EAEKM,iBAAiB;IAAA;;IAAA;MACrB,IAAI;QACF,MAAI,CAACC,OAAL,SAAqBvB,aAAa,CAAC,MAAI,CAACG,IAAL,CAAUQ,GAAV,CAAc,+CAAd,CAAD,CAAlC;MACD,CAFD,CAGA,OAAOK,KAAP,EAAc;QACZI,OAAO,CAACJ,KAAR,CAAcA,KAAd;MACD;IANoB;EAOtB;;EAEKQ,oBAAoB;IAAA;;IAAA;MACxB,IAAI;QACF,MAAI,CAACD,OAAL,SAAqBvB,aAAa,CAAC,MAAI,CAACG,IAAL,CAAUQ,GAAV,CAAc,iDAAd,CAAD,CAAlC;MACD,CAFD,CAGA,OAAOK,KAAP,EAAc;QACZI,OAAO,CAACJ,KAAR,CAAcA,KAAd;MACD;IANuB;EAOzB;;AA9C4B;;;mBAAlBf,oBAAkBwB;AAAA;;;SAAlBxB;EAAkByB,SAAlBzB,kBAAkB;EAAA0B,YAFjB","names":["HttpParams","lastValueFrom","AuthServiceService","constructor","http","getToken","promise","Promise","resolve","reject","params","set","get","subscribe","next","res","token","error","err","getAdminOnly","messageObj","console","log","getAdminOrManager","message","getAuthenticatedUser","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Development\\JWTAuth\\ClientApp\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n  token: string = \"\";\n  message: string = \"\";\n  constructor(private http: HttpClient) { }\n\n  getToken(): Promise<string> {\n    const promise = new Promise<string>((resolve, reject) => {\n      var params = new HttpParams().set(\"username\", \"admin\").set(\"password\", \"password\");\r\n      this.http.get(\"https://localhost:7054/token\", { params }).subscribe({\r\n        next: (res: any) => {\r\n          resolve(res.token);\r\n        },\r\n        error: (err:any) => {\r\n          reject(err);\r\n        }\r\n      })\r\n    });\n    return promise;\r\n  }\n\n  async getAdminOnly() {\n    try {\r\n      var messageObj = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/admin-only\"));\r\n      console.log(messageObj);\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n\n  async getAdminOrManager() {\n    try {\r\n      this.message = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/manager-or-admin\")) as string;\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n\n  async getAuthenticatedUser() {\n    try {\r\n      this.message = await lastValueFrom(this.http.get(\"https://localhost:7054/MyAPI/authenticated-user\")) as string;\r\n    }\r\n    catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module"}